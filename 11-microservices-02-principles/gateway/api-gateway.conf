    server {
        listen *:8080;

#         auth_request_set $auth_cookie $upstream_http_set_cookie;
#         add_header Set-Cookie $auth_cookie;


#POST /v1/register/
# Анонимный доступ.
# Запрос направляется в сервис security:3000 POST /v1/user

        location /v1/register {

               proxy_http_version 1.1;
               proxy_method      POST;
               client_max_body_size 4M;
               proxy_pass http://security:3000/v1/user;
        }

#POST /v1/token
# Анонимный доступ.
# Запрос направляется в сервис security:3000 POST /v1/token

        location /v1/token {

               proxy_http_version 1.1;
               proxy_method      POST;
               proxy_pass http://security:3000/v1/token;
        }

# GET /v1/user
# Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security:3000 GET /v1/token/validation/
# Запрос направляется в сервис security:3000 GET /v1/user

        location /v1/user {
               proxy_http_version 1.1;
               proxy_method      GET;
               client_max_body_size 4M;
               proxy_set_header Connection "";
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
               proxy_set_header X-Frame-Options SAMEORIGIN;
               proxy_set_header X-Request-Start $msec;
               proxy_pass_header Set-Cookie;
               proxy_buffers 512 32k;
               proxy_buffer_size 32k;
               proxy_read_timeout 600s;
               proxy_cache off;
               proxy_buffering on;
               auth_request /_oauth2_token_introspection;
               auth_request_set $auth_cookie $upstream_http_set_cookie;
               add_header Set-Cookie $auth_cookie;
               proxy_pass http://security:3000/v1/user/;
        }


# POST /v1/upload
# Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security:3000 GET /v1/token/validation/
# Запрос направляется в сервис uploader:3000 POST /v1/upload

        location /v1/upload {
               proxy_http_version 1.1;
               proxy_method      POST;
               auth_request /_oauth2_token_introspection;
               auth_request_set $auth_cookie $upstream_http_set_cookie;
               add_header Set-Cookie $auth_cookie;
               proxy_pass http://uploader:3000/v1/upload/;
        }


# GET /v1/user/{image}
# Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security:3000 GET /v1/token/validation/
# Запрос направляется в сервис minio GET /images/{image}

        location ~ ^/v1/image/(.+\.jpg)$ {
               proxy_http_version 1.1;
               proxy_method      GET;
               auth_request /_oauth2_token_introspection;
               auth_request_set $auth_cookie $upstream_http_set_cookie;
               add_header Set-Cookie $auth_cookie;
               proxy_pass http://storage:9000/data/$1;
        }

        location ~ ^/images/(.+\.jpg)$ {
               proxy_http_version 1.1;
               proxy_method      GET;
               proxy_pass http://storage:9000/data/$1;
        }

         location / {
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               proxy_set_header X-Forwarded-Proto $scheme;
               proxy_set_header Host $http_host;

               proxy_connect_timeout 300;
               proxy_http_version 1.1;
               proxy_set_header Connection "";
               chunked_transfer_encoding off;

               proxy_pass http://storage:9000;
         }

        location = /_oauth2_token_introspection {
                internal;
                proxy_method      GET;
                proxy_pass        http://security:3000/v1/token/validation;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header Host $host;
                proxy_set_header X-Original-URI $request_uri;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Authorization $http_authorization;
    proxy_pass_header Authorization;

        }

    }